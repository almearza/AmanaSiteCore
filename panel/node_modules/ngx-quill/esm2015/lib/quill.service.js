import { __awaiter } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { defaultModules } from './quill-defaults';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
import * as ɵngcc0 from '@angular/core';
export class QuillService {
    constructor(config) {
        this.config = config;
        this.count = 0;
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    getQuill() {
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                const quillImport = yield import('quill');
                this.Quill = (quillImport.default ? quillImport.default : quillImport);
                // Only register custom options and modules once
                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {
                    const newCustomOption = this.Quill.import(customOption.import);
                    newCustomOption.whitelist = customOption.whitelist;
                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);
                });
                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {
                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);
                });
                resolve(this.Quill);
            }));
        }
        return this.$importPromise;
    }
}
QuillService.ɵfac = function QuillService_Factory(t) { return new (t || QuillService)(ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN)); };
QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
QuillService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXF1aWxsL3NyYy9saWIvcXVpbGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDbEQsT0FBTyxFQUFFLGtCQUFrQixFQUFlLE1BQU0sMkJBQTJCLENBQUE7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2pEO0FBR0M7O0FBQ0QsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFLRSxZQUNxQyxNQUFtQjtBQUN2RCxRQURvQyxXQUFNLEdBQU4sTUFBTSxDQUFhO0FBQzFELFFBSlUsVUFBSyxHQUFHLENBQUMsQ0FBQTtBQUNuQixRQUlJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3RCLFlBQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQTtBQUMvQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDaEIsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QyxZQUFNLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBTyxPQUFPLEVBQUUsRUFBRTtBQUNiO0FBRXZCLGdCQUZkLE1BQU0sV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ2pELGdCQUNRLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQVEsQ0FBQTtBQUNyRixnQkFDUSxnREFBZ0Q7QUFDeEQsZ0JBQVEsTUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDNUQsb0JBQVUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3hFLG9CQUFVLGVBQWUsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQTtBQUM1RCxvQkFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtBQUMvRixnQkFBUSxDQUFDLENBQUMsQ0FBQTtBQUNWLGdCQUNRLE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUMsY0FBYyxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7QUFDdEUsb0JBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFDOUYsZ0JBQVEsQ0FBQyxDQUFDLENBQUE7QUFDVixnQkFDUSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzNCLFlBQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQTtBQUNSLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtBQUM5QixJQUFFLENBQUM7QUFDSDs4SEFBQztBQUNELG1NQXZDSztBQUFDO0VBSEwsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNLGNBQ25CLHZFQUVlLDRDQU1YLE1BQU0sU0FBQyxrQkFBa0I7QUFBUTs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOLCBRdWlsbENvbmZpZyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnXG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgcHJpdmF0ZSBRdWlsbCE6IGFueVxuICBwcml2YXRlICRpbXBvcnRQcm9taXNlITogUHJvbWlzZTxhbnk+XG4gIHByaXZhdGUgY291bnQgPSAwXG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChRVUlMTF9DT05GSUdfVE9LRU4pIHB1YmxpYyBjb25maWc6IFF1aWxsQ29uZmlnXG4gICkge1xuICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlnID0geyBtb2R1bGVzOiBkZWZhdWx0TW9kdWxlcyB9XG4gICAgfVxuICB9XG5cbiAgZ2V0UXVpbGwoKSB7XG4gICAgdGhpcy5jb3VudCsrXG4gICAgaWYgKCF0aGlzLlF1aWxsICYmIHRoaXMuY291bnQgPT09IDEpIHtcbiAgICAgIHRoaXMuJGltcG9ydFByb21pc2UgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBxdWlsbEltcG9ydCA9IGF3YWl0IGltcG9ydCgncXVpbGwnKVxuXG4gICAgICAgIHRoaXMuUXVpbGwgPSAocXVpbGxJbXBvcnQuZGVmYXVsdCA/IHF1aWxsSW1wb3J0LmRlZmF1bHQgOiBxdWlsbEltcG9ydCkgYXMgYW55XG5cbiAgICAgICAgLy8gT25seSByZWdpc3RlciBjdXN0b20gb3B0aW9ucyBhbmQgbW9kdWxlcyBvbmNlXG4gICAgICAgIHRoaXMuY29uZmlnLmN1c3RvbU9wdGlvbnM/LmZvckVhY2goKGN1c3RvbU9wdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld0N1c3RvbU9wdGlvbiA9IHRoaXMuUXVpbGwuaW1wb3J0KGN1c3RvbU9wdGlvbi5pbXBvcnQpXG4gICAgICAgICAgbmV3Q3VzdG9tT3B0aW9uLndoaXRlbGlzdCA9IGN1c3RvbU9wdGlvbi53aGl0ZWxpc3RcbiAgICAgICAgICB0aGlzLlF1aWxsLnJlZ2lzdGVyKG5ld0N1c3RvbU9wdGlvbiwgdHJ1ZSwgdGhpcy5jb25maWcuc3VwcHJlc3NHbG9iYWxSZWdpc3Rlcldhcm5pbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tTW9kdWxlcz8uZm9yRWFjaCgoe2ltcGxlbWVudGF0aW9uLCBwYXRofSkgPT4ge1xuICAgICAgICAgIHRoaXMuUXVpbGwucmVnaXN0ZXIocGF0aCwgaW1wbGVtZW50YXRpb24sIHRoaXMuY29uZmlnLnN1cHByZXNzR2xvYmFsUmVnaXN0ZXJXYXJuaW5nKVxuICAgICAgICB9KVxuXG4gICAgICAgIHJlc29sdmUodGhpcy5RdWlsbClcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRpbXBvcnRQcm9taXNlXG4gIH1cbn1cbiJdfQ==